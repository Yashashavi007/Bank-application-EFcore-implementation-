// <auto-generated />
using System;
using EFCore.Bankapp.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCore.Bankapp.Service.Migrations
{
    [DbContext(typeof(BankDBContext))]
    partial class BankDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("EFCore.Bankapp.Model.Bank", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IFSCCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ID", "IFSCCode");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("EFCore.Bankapp.Model.Currency", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<float>("ConversionRate")
                        .HasColumnType("float");

                    b.HasKey("Name");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("EFCore.Bankapp.Model.Customer", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<float>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("BankID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BankIFSCCode")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Pin")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasAlternateKey("AccountNumber");

                    b.HasIndex("BankID", "BankIFSCCode");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EFCore.Bankapp.Model.Employee", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BankID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BankIFSCCode")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Pin")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("BankID", "BankIFSCCode");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EFCore.Bankapp.Model.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CustomerID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReceiverAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("SenderAccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("EFCore.Bankapp.Model.Customer", b =>
                {
                    b.HasOne("EFCore.Bankapp.Model.Bank", "Bank")
                        .WithMany("Customers")
                        .HasForeignKey("BankID", "BankIFSCCode");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("EFCore.Bankapp.Model.Employee", b =>
                {
                    b.HasOne("EFCore.Bankapp.Model.Bank", "Bank")
                        .WithMany("Employees")
                        .HasForeignKey("BankID", "BankIFSCCode");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("EFCore.Bankapp.Model.Transaction", b =>
                {
                    b.HasOne("EFCore.Bankapp.Model.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EFCore.Bankapp.Model.Bank", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EFCore.Bankapp.Model.Customer", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
